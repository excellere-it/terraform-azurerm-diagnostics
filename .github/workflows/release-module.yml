name: Release Module

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags (e.g., v0.0.12, v1.0.0)
      - '0.0.*'   # Legacy tag format support

permissions:
  contents: write

jobs:
  # ===========================================================================
  # Validation Job
  # ===========================================================================
  # Ensures code quality before creating a release
  validate:
    name: Validate Before Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run Tests
        run: terraform test -verbose
        env:
          ARM_SKIP_PROVIDER_REGISTRATION: "true"

      - name: Setup terraform-docs
        uses: terraform-docs/gh-actions@v1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "false"
          fail-on-diff: true

      - name: Validation Summary
        run: |
          echo "## Release Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Format check passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Validation passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Documentation up-to-date" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # ===========================================================================
  # Release Job
  # ===========================================================================
  # Creates the GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify Tag Format
        run: |
          TAG="${{ github.ref_name }}"
          if [[ ! "$TAG" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag format is invalid. Expected semantic versioning (e.g., v0.0.12 or 0.0.12)"
            echo "Got: $TAG"
            exit 1
          fi
          echo "âœ… Tag format is valid: $TAG"

      - name: Extract Version
        id: version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ github.ref_name }}^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found. This is the first release."
            NOTES="Initial release of terraform-azurerm-diagnostics module."
          else
            echo "Generating release notes from $PREVIOUS_TAG to ${{ github.ref_name }}"

            # Generate commit log
            NOTES="## Changes since $PREVIOUS_TAG"$'\n\n'
            NOTES+="### Commits"$'\n\n'

            # Get commits between tags
            COMMITS=$(git log $PREVIOUS_TAG..${{ github.ref_name }} --pretty=format:"- %s (%h)" --no-merges)
            NOTES+="$COMMITS"
          fi

          # Save to file for multiline handling
          echo "$NOTES" > release_notes.md
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true

      - name: Release Summary
        run: |
          echo "## Release Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View the release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
